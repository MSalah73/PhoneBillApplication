package edu.pdx.cs410J.ms24;

import java.io.File;
import java.io.IOException;
import java.security.InvalidParameterException;
import java.util.Arrays;

/**
 * This class simulate path, file, and directory creation.
 *
 * @author Zack Salah
 */

public class FileAndDirectoryGenerator {

  /**
   * Creates a new <code>FileAndDirectoryGenerator</code>.
   */
  public FileAndDirectoryGenerator() {
  }

  /**
   * Creates a file and a directory if they don't exist.
   * @param path
   * creates file and directory from the passed in path
   * generated by <code>pathGenerator</code> method.
   * @throws IOException
   * If Object of File has issues with path value.
   * @throws InvalidParameterException
   * it take effect only on write. if the file exist yet
   * its empty, it throws an error.
   */
  public void createDirectoryAndFile(final String path) throws IOException {
    File file = new File(path);
    File mkdir = null;
    if(path.contains("/")) {
      var directory = Arrays.asList(path.split("/" + file.getName()));
      mkdir = new File(directory.get(0));
    }
    if (mkdir != null && !mkdir.exists())
      mkdir.mkdirs();
    if (!file.exists())
      file.createNewFile();
    else if(file.length() == 0) {
      throw new InvalidParameterException("File write failed: PhoneBill has no customer name");
    }
  }

  /**
   * Generate the path with passed in file name and directory.
   * @param fileName
   * The name of the file. It can be with .txt or without the extension.
   * @return path
   * concatenate with the right format and return it
   * @throws InvalidParameterException
   * If the passed in file names contains extensions other than .txt
   * or if its empty
   */
  public final String pathValidator(final String fileName)
      throws IOException {
    if (fileName == null || fileName.isEmpty()) {
      throw new InvalidParameterException("File name can not be empty");
    } else if (fileName.matches("^.+?\\..*?") && !fileName.matches("^.+?\\.txt")) {
      throw new InvalidParameterException("File must only have .txt extension");
    }
    return (fileName.matches("^.+?\\.txt$") ? fileName : fileName + ".txt");
  }
}